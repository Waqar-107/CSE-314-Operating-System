========================
proc.c:
========================
1. allocproc() - finds an empty slot in the ptable, initate things. we initiate our newly added variables here. this is also called from "fork()"

2. fork() - calls allocproc, creates a child process. here we  copy parents swap in childs swapfile


========================
exec.c: loads program in memory
========================
1. exec() - uses allocuvm() that inserts page in the pagetable


========================
vm.c - vm for virtual memory
========================
1. allocuvm() - allocates new page table -> this is xv6's default page table


========================
kalloc.c
========================
1. struct run{} - a dumb object that can point to similar object

2. struct kmem - has a spinlock, pointer of run(freelist)

3. freerange(start, end) - free physical memory in this range

4. kinit1(start, end) - called by main, use freerange

5. kinit2(start, end) - called by main, use freerange

6. kfree(char *va) - frees the physical address

7. kalloc - allocates a page of 4096 bytes


========================
sys_proc.c
========================
1. sys_sbrk() - the sbrk(n) system call grows the process's memory size by n bytes, and then returns the start of the newly allocated region 



1. we call "createSwapFile" in "exec.c" so that we can have swap-files for procs "sh" and "init"
and in fork for other processes.  

2. 
